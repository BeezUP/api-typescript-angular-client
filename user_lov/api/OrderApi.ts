/**
 * Marketplaces - Orders
 * The features exposed in this API are centered around managing Orders harvested from your configured marketplaces.\\ This includes: - fetching current information (as known by BeezUP) for a single or multiple Orders, - requesting Order harvest to synchronize your marketplaces and BeezUP accounts, - changing BeezUP data and requesting changes to your marketplaces (accepting, shipping, etc), - configuring automatic changes to marketplace based our newly fetched data, - creating and exporting reports for your Orders. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class OrderApi {
    protected basePath = 'https://api.beezup.com/v2/user/marketplaces/orders';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
        * Change your marketplace Order Information (accept, ship, etc.)
        * 
        * @param marketplaceTechnicalCode The marketplace technical code
        * @param accountId The account identifier
        * @param beezUPOrderId The BeezUP Order identifier
        * @param changeOrderType The Order change type
        * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.
        * @param request 
        * @param ifMatch ETag value to identify the last known version of requested Order, to ensure that you are making a change on the lastest version of the order.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
        * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account.
        */
    public changeOrder (marketplaceTechnicalCode: string, accountId: number, beezUPOrderId: string, changeOrderType: string, userName: string, request: models.ChangeOrderRequest, ifMatch: string, testMode?: boolean, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/{changeOrderType}'
            .replace('{' + 'marketplaceTechnicalCode' + '}', String(marketplaceTechnicalCode))
            .replace('{' + 'accountId' + '}', String(accountId))
            .replace('{' + 'beezUPOrderId' + '}', String(beezUPOrderId))
            .replace('{' + 'changeOrderType' + '}', String(changeOrderType));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'marketplaceTechnicalCode' is not null or undefined
        if (marketplaceTechnicalCode === null || marketplaceTechnicalCode === undefined) {
            throw new Error('Required parameter marketplaceTechnicalCode was null or undefined when calling changeOrder.');
        }
        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling changeOrder.');
        }
        // verify required parameter 'beezUPOrderId' is not null or undefined
        if (beezUPOrderId === null || beezUPOrderId === undefined) {
            throw new Error('Required parameter beezUPOrderId was null or undefined when calling changeOrder.');
        }
        // verify required parameter 'changeOrderType' is not null or undefined
        if (changeOrderType === null || changeOrderType === undefined) {
            throw new Error('Required parameter changeOrderType was null or undefined when calling changeOrder.');
        }
        // verify required parameter 'userName' is not null or undefined
        if (userName === null || userName === undefined) {
            throw new Error('Required parameter userName was null or undefined when calling changeOrder.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling changeOrder.');
        }
        // verify required parameter 'ifMatch' is not null or undefined
        if (ifMatch === null || ifMatch === undefined) {
            throw new Error('Required parameter ifMatch was null or undefined when calling changeOrder.');
        }
        if (userName !== undefined) {
            queryParameters['userName'] = userName;
        }

        if (testMode !== undefined) {
            queryParameters['testMode'] = testMode;
        }

        headerParams['If-Match'] = ifMatch;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Clear an Order&#39;s merchant information
        * 
        * @param marketplaceTechnicalCode The marketplace technical code
        * @param accountId The account identifier
        * @param beezUPOrderId The BeezUP Order identifier
        */
    public clearMerchantOrderInfo (marketplaceTechnicalCode: string, accountId: number, beezUPOrderId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/clearMerchantOrderInfo'
            .replace('{' + 'marketplaceTechnicalCode' + '}', String(marketplaceTechnicalCode))
            .replace('{' + 'accountId' + '}', String(accountId))
            .replace('{' + 'beezUPOrderId' + '}', String(beezUPOrderId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'marketplaceTechnicalCode' is not null or undefined
        if (marketplaceTechnicalCode === null || marketplaceTechnicalCode === undefined) {
            throw new Error('Required parameter marketplaceTechnicalCode was null or undefined when calling clearMerchantOrderInfo.');
        }
        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling clearMerchantOrderInfo.');
        }
        // verify required parameter 'beezUPOrderId' is not null or undefined
        if (beezUPOrderId === null || beezUPOrderId === undefined) {
            throw new Error('Required parameter beezUPOrderId was null or undefined when calling clearMerchantOrderInfo.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get full Order and Order Item(s) properties
        * 
        * @param marketplaceTechnicalCode The marketplace technical code
        * @param accountId The account identifier
        * @param beezUPOrderId The BeezUP Order identifier
        * @param ifNoneMatch ETag value to identify the last known version of requested Order\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
        */
    public getOrder (marketplaceTechnicalCode: string, accountId: number, beezUPOrderId: string, ifNoneMatch?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Order> {
        const localVarPath = this.basePath + '/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}'
            .replace('{' + 'marketplaceTechnicalCode' + '}', String(marketplaceTechnicalCode))
            .replace('{' + 'accountId' + '}', String(accountId))
            .replace('{' + 'beezUPOrderId' + '}', String(beezUPOrderId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'marketplaceTechnicalCode' is not null or undefined
        if (marketplaceTechnicalCode === null || marketplaceTechnicalCode === undefined) {
            throw new Error('Required parameter marketplaceTechnicalCode was null or undefined when calling getOrder.');
        }
        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling getOrder.');
        }
        // verify required parameter 'beezUPOrderId' is not null or undefined
        if (beezUPOrderId === null || beezUPOrderId === undefined) {
            throw new Error('Required parameter beezUPOrderId was null or undefined when calling getOrder.');
        }
        headerParams['If-None-Match'] = ifNoneMatch;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get an Order&#39;s harvest and change history
        * 
        * @param marketplaceTechnicalCode The marketplace technical code
        * @param accountId The account identifier
        * @param beezUPOrderId The BeezUP Order identifier
        */
    public getOrderHistory (marketplaceTechnicalCode: string, accountId: number, beezUPOrderId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.OrderHistory> {
        const localVarPath = this.basePath + '/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/history'
            .replace('{' + 'marketplaceTechnicalCode' + '}', String(marketplaceTechnicalCode))
            .replace('{' + 'accountId' + '}', String(accountId))
            .replace('{' + 'beezUPOrderId' + '}', String(beezUPOrderId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'marketplaceTechnicalCode' is not null or undefined
        if (marketplaceTechnicalCode === null || marketplaceTechnicalCode === undefined) {
            throw new Error('Required parameter marketplaceTechnicalCode was null or undefined when calling getOrderHistory.');
        }
        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling getOrderHistory.');
        }
        // verify required parameter 'beezUPOrderId' is not null or undefined
        if (beezUPOrderId === null || beezUPOrderId === undefined) {
            throw new Error('Required parameter beezUPOrderId was null or undefined when calling getOrderHistory.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Send harvest request for a single Order
        * 
        * @param marketplaceTechnicalCode The marketplace technical code
        * @param accountId The account identifier
        * @param beezUPOrderId The BeezUP Order identifier
        */
    public harvestOrder (marketplaceTechnicalCode: string, accountId: number, beezUPOrderId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/harvest'
            .replace('{' + 'marketplaceTechnicalCode' + '}', String(marketplaceTechnicalCode))
            .replace('{' + 'accountId' + '}', String(accountId))
            .replace('{' + 'beezUPOrderId' + '}', String(beezUPOrderId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'marketplaceTechnicalCode' is not null or undefined
        if (marketplaceTechnicalCode === null || marketplaceTechnicalCode === undefined) {
            throw new Error('Required parameter marketplaceTechnicalCode was null or undefined when calling harvestOrder.');
        }
        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling harvestOrder.');
        }
        // verify required parameter 'beezUPOrderId' is not null or undefined
        if (beezUPOrderId === null || beezUPOrderId === undefined) {
            throw new Error('Required parameter beezUPOrderId was null or undefined when calling harvestOrder.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Set an Order&#39;s merchant information
        * 
        * @param marketplaceTechnicalCode The marketplace technical code
        * @param accountId The account identifier
        * @param beezUPOrderId The BeezUP Order identifier
        * @param request 
        */
    public setMerchantOrderInfo (marketplaceTechnicalCode: string, accountId: number, beezUPOrderId: string, request: models.SetMerchantOrderInfoRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/setMerchantOrderInfo'
            .replace('{' + 'marketplaceTechnicalCode' + '}', String(marketplaceTechnicalCode))
            .replace('{' + 'accountId' + '}', String(accountId))
            .replace('{' + 'beezUPOrderId' + '}', String(beezUPOrderId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'marketplaceTechnicalCode' is not null or undefined
        if (marketplaceTechnicalCode === null || marketplaceTechnicalCode === undefined) {
            throw new Error('Required parameter marketplaceTechnicalCode was null or undefined when calling setMerchantOrderInfo.');
        }
        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling setMerchantOrderInfo.');
        }
        // verify required parameter 'beezUPOrderId' is not null or undefined
        if (beezUPOrderId === null || beezUPOrderId === undefined) {
            throw new Error('Required parameter beezUPOrderId was null or undefined when calling setMerchantOrderInfo.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling setMerchantOrderInfo.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
