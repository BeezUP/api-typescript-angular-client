/**
 * Analytics
 * This API will help you to manage the tracking of your clicks and your sales, get reporting on this trackings and put in place rules based on this reporting to automatically optimize your channel catalogs. \\ Also, you will be able to consult the rule execution reporting. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class OptimisationsApi {
    protected basePath = 'https://api.beezup.com/v2/user/analytics';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
        * Optimise products
        * /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
        * @param storeId Your store identifier
        * @param actionName 
        * @param request 
        */
    public optimise (storeId: string, actionName: string, request: models.OptimiseRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/{storeId}/optimisations/{actionName}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'actionName' + '}', String(actionName));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling optimise.');
        }
        // verify required parameter 'actionName' is not null or undefined
        if (actionName === null || actionName === undefined) {
            throw new Error('Required parameter actionName was null or undefined when calling optimise.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling optimise.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Optimise products&#39;s category
        * /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body.  
        * @param storeId Your store identifier
        * @param catalogCategoryId The category identifier concerned by this optimisation
        * @param actionName 
        * @param request The channel identifier list concerned by this optimisation
        */
    public optimiseByCategory (storeId: string, catalogCategoryId: string, actionName: string, request?: Array<string>, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/{storeId}/optimisations/bycategory/{catalogCategoryId}/{actionName}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'catalogCategoryId' + '}', String(catalogCategoryId))
            .replace('{' + 'actionName' + '}', String(actionName));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling optimiseByCategory.');
        }
        // verify required parameter 'catalogCategoryId' is not null or undefined
        if (catalogCategoryId === null || catalogCategoryId === undefined) {
            throw new Error('Required parameter catalogCategoryId was null or undefined when calling optimiseByCategory.');
        }
        // verify required parameter 'actionName' is not null or undefined
        if (actionName === null || actionName === undefined) {
            throw new Error('Required parameter actionName was null or undefined when calling optimiseByCategory.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Optimise products&#39;s category
        * /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
        * @param storeId Your store identifier
        * @param channelId The channel identifier concerned by this optimisation
        * @param actionName 
        */
    public optimiseByChannel (storeId: string, channelId: string, actionName: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/{storeId}/optimisations/bychannel/{channelId}/{actionName}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'channelId' + '}', String(channelId))
            .replace('{' + 'actionName' + '}', String(actionName));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling optimiseByChannel.');
        }
        // verify required parameter 'channelId' is not null or undefined
        if (channelId === null || channelId === undefined) {
            throw new Error('Required parameter channelId was null or undefined when calling optimiseByChannel.');
        }
        // verify required parameter 'actionName' is not null or undefined
        if (actionName === null || actionName === undefined) {
            throw new Error('Required parameter actionName was null or undefined when calling optimiseByChannel.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Optimise products
        * /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
        * @param storeId Your store identifier
        * @param productId The product identifier concerned by this optimisation
        * @param actionName 
        * @param request The channel identifier list concerned by this optimisation
        */
    public optimiseByProduct (storeId: string, productId: string, actionName: string, request?: Array<string>, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/{storeId}/optimisations/byproduct/{productId}/{actionName}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'productId' + '}', String(productId))
            .replace('{' + 'actionName' + '}', String(actionName));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling optimiseByProduct.');
        }
        // verify required parameter 'productId' is not null or undefined
        if (productId === null || productId === undefined) {
            throw new Error('Required parameter productId was null or undefined when calling optimiseByProduct.');
        }
        // verify required parameter 'actionName' is not null or undefined
        if (actionName === null || actionName === undefined) {
            throw new Error('Required parameter actionName was null or undefined when calling optimiseByProduct.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
