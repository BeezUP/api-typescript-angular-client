/**
 * BeezUP API
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class V2UserCatalogsApi {
    protected basePath = 'https://api.beezup.comv2';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
        * Configure Auto Import Interval
        * 
        * @param storeId Your store identifier
        * @param request 
        */
    public autoConfigureAutoImportInterval (storeId: string, request: models.ConfigureAutoImportIntervalRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/autoImport/scheduling/interval'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling autoConfigureAutoImportInterval.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling autoConfigureAutoImportInterval.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Delete Auto Import
        * 
        * @param storeId Your store identifier
        */
    public autoDeleteAutoImport (storeId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/autoImport'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling autoDeleteAutoImport.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the auto import configuration
        * 
        * @param storeId Your store identifier
        */
    public autoGetAutoImportConfiguration (storeId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.AutoImportConfiguration> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/autoImport'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling autoGetAutoImportConfiguration.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Pause Auto Import
        * 
        * @param storeId Your store identifier
        */
    public autoPauseAutoImport (storeId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/autoImport/pause'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling autoPauseAutoImport.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Resume Auto Import
        * 
        * @param storeId Your store identifier
        */
    public autoResumeAutoImport (storeId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/autoImport/resume'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling autoResumeAutoImport.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Configure Auto Import Schedules
        * 
        * @param storeId Your store identifier
        * @param request 
        */
    public autoScheduleAutoImport (storeId: string, request: models.ScheduleAutoImportRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/autoImport/scheduling/schedules'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling autoScheduleAutoImport.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling autoScheduleAutoImport.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Start Auto Import Manually
        * 
        * @param storeId Your store identifier
        */
    public autoStartAutoImport (storeId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.BeezUPCommonLink2>> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/autoImport/start'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling autoStartAutoImport.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Change Catalog Column User Name
        * 
        * @param storeId Your store identifier
        * @param columnId The catalog column identifier
        * @param request 
        */
    public catalogChangeCatalogColumnUserName (storeId: string, columnId: string, request: models.ChangeUserColumnNameRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/catalogColumns/{columnId}/rename'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling catalogChangeCatalogColumnUserName.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling catalogChangeCatalogColumnUserName.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling catalogChangeCatalogColumnUserName.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Change custom column expression
        * 
        * @param storeId Your store identifier
        * @param columnId The custom column identifier
        * @param request 
        */
    public catalogChangeCustomColumnExpression (storeId: string, columnId: string, request: models.ChangeCustomColumnExpressionRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/customColumns/{columnId}/expression'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling catalogChangeCustomColumnExpression.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling catalogChangeCustomColumnExpression.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling catalogChangeCustomColumnExpression.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Change Custom Column User Name
        * 
        * @param storeId Your store identifier
        * @param columnId The custom column identifier
        * @param request 
        */
    public catalogChangeCustomColumnUserName (storeId: string, columnId: string, request: models.ChangeUserColumnNameRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/customColumns/{columnId}/rename'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling catalogChangeCustomColumnUserName.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling catalogChangeCustomColumnUserName.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling catalogChangeCustomColumnUserName.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Compute the expression for this catalog.
        * 
        * @param storeId Your store identifier
        * @param request 
        */
    public catalogComputeExpression (storeId: string, request: models.ComputeExpressionRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<string> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/customColumns/computeExpression'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling catalogComputeExpression.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling catalogComputeExpression.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Delete custom column
        * 
        * @param storeId Your store identifier
        * @param columnId The custom column identifier
        */
    public catalogDeleteCustomColumn (storeId: string, columnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/customColumns/{columnId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling catalogDeleteCustomColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling catalogDeleteCustomColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the BeezUP columns
        * Get the BeezUP columns, this columns are used for mapping during the manual catalog importation process.
        */
    public catalogGetBeezUPColumns (extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.BeezUPColumnConfiguration>> {
        const localVarPath = this.basePath + '/v2/user/catalogs/beezupColumns';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get catalog column list
        * 
        * @param storeId Your store identifier
        */
    public catalogGetCatalogColumns (storeId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.CatalogColumns> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/catalogColumns'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling catalogGetCatalogColumns.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get category list
        * 
        * @param storeId Your store identifier
        * @param acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
        */
    public catalogGetCategories (storeId: string, acceptEncoding: Array<string>, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Categories> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/categories'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling catalogGetCategories.');
        }
        // verify required parameter 'acceptEncoding' is not null or undefined
        if (acceptEncoding === null || acceptEncoding === undefined) {
            throw new Error('Required parameter acceptEncoding was null or undefined when calling catalogGetCategories.');
        }
        headerParams['Accept-Encoding'] = acceptEncoding;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the encrypted custom column expression
        * 
        * @param storeId Your store identifier
        * @param columnId The custom column identifier
        */
    public catalogGetCustomColumnExpression (storeId: string, columnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<string> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/customColumns/{columnId}/expression'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling catalogGetCustomColumnExpression.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling catalogGetCustomColumnExpression.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get custom column list
        * 
        * @param storeId Your store identifier
        */
    public catalogGetCustomColumns (storeId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.CustomColumns> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/customColumns'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling catalogGetCustomColumns.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get product
        * 
        * @param storeId Your store identifier
        * @param productId The product identifier you want to get
        */
    public catalogGetProduct (storeId: string, productId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Product> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/products/{productId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'productId' + '}', String(productId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling catalogGetProduct.');
        }
        // verify required parameter 'productId' is not null or undefined
        if (productId === null || productId === undefined) {
            throw new Error('Required parameter productId was null or undefined when calling catalogGetProduct.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get product list
        * 
        * @param storeId Your store identifier
        * @param request 
        */
    public catalogGetProducts (storeId: string, request?: models.GetProductsRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Products> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/products'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling catalogGetProducts.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get random product list
        * 
        * @param storeId Your store identifier
        * @param count The count of random product you want to get
        */
    public catalogGetRandomProducts (storeId: string, count?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Products> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/products/random'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling catalogGetRandomProducts.');
        }
        if (count !== undefined) {
            queryParameters['count'] = count;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Create or replace a custom column
        * 
        * @param storeId Your store identifier
        * @param columnId The custom column identifier
        * @param request 
        */
    public catalogSaveCustomColumn (storeId: string, columnId: string, request: models.CreateCustomColumnRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/customColumns/{columnId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling catalogSaveCustomColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling catalogSaveCustomColumn.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling catalogSaveCustomColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Activate the auto importation of the last successful manual catalog importation.
        * Once you have made your fist manual catalog importation with success, you can call this operation to import it automatically. No parameter required, we know which one it is.
        * @param storeId Your store identifier
        */
    public importationActivateAutoImport (storeId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/autoImport'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationActivateAutoImport.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Cancel importation
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        */
    public importationCancel (storeId: string, executionId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationCancel.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationCancel.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Commit Importation
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        */
    public importationCommit (storeId: string, executionId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/commit'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationCommit.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationCommit.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Commit columns
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        */
    public importationCommitColumns (storeId: string, executionId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/commitColumns'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationCommitColumns.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationCommitColumns.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Configure catalog column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        * @param request 
        */
    public importationConfigureCatalogColumn (storeId: string, executionId: string, columnId: string, request: models.ConfigureCatalogColumnCatalogRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationConfigureCatalogColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationConfigureCatalogColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationConfigureCatalogColumn.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling importationConfigureCatalogColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Configure remaining catalog columns
        * This operation should be used after you have mapped the required BeezUP Columns
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        */
    public importationConfigureRemainingCatalogColumns (storeId: string, executionId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/configureRemainingCatalogColumns'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationConfigureRemainingCatalogColumns.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationConfigureRemainingCatalogColumns.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Delete Custom Column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        */
    public importationDeleteCustomColumn (storeId: string, executionId: string, columnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationDeleteCustomColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationDeleteCustomColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationDeleteCustomColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the encrypted custom column expression in this importation
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        */
    public importationGetCustomColumnExpression (storeId: string, executionId: string, columnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<string> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/expression'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationGetCustomColumnExpression.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationGetCustomColumnExpression.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationGetCustomColumnExpression.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get custom columns currently place in this importation
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        */
    public importationGetCustomColumns (storeId: string, executionId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.CustomColumns> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationGetCustomColumns.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationGetCustomColumns.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get detected catalog columns during this importation.
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        */
    public importationGetDetectedCatalogColumns (storeId: string, executionId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.DetectedCatalogColumns> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationGetDetectedCatalogColumns.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationGetDetectedCatalogColumns.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the importation status
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        */
    public importationGetImportationMonitoring (storeId: string, executionId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ImportationMonitoring> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationGetImportationMonitoring.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationGetImportationMonitoring.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the last input configuration
        * 
        * @param storeId Your store identifier
        */
    public importationGetManualUpdateLastInputConfig (storeId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.LastManualImportInputConfiguration> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/inputConfiguration'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationGetManualUpdateLastInputConfig.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the product sample related to this importation with all columns (catalog and custom)
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param productSampleIndex Index of the product sample. Starting from 0 to 99.
        */
    public importationGetProductSample (storeId: string, executionId: string, productSampleIndex: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ProductSample> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'productSampleIndex' + '}', String(productSampleIndex));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationGetProductSample.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationGetProductSample.');
        }
        // verify required parameter 'productSampleIndex' is not null or undefined
        if (productSampleIndex === null || productSampleIndex === undefined) {
            throw new Error('Required parameter productSampleIndex was null or undefined when calling importationGetProductSample.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get product sample custom column value related to this importation.
        * /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param productSampleIndex Index of the product sample. Starting from 0 to 99.
        * @param columnId The custom column identifier
        */
    public importationGetProductSampleCustomColumnValue (storeId: string, executionId: string, productSampleIndex: number, columnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<string> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}/customColumns/{columnId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'productSampleIndex' + '}', String(productSampleIndex))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationGetProductSampleCustomColumnValue.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationGetProductSampleCustomColumnValue.');
        }
        // verify required parameter 'productSampleIndex' is not null or undefined
        if (productSampleIndex === null || productSampleIndex === undefined) {
            throw new Error('Required parameter productSampleIndex was null or undefined when calling importationGetProductSampleCustomColumnValue.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationGetProductSampleCustomColumnValue.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the latest catalog importation reporting
        * 
        * @param storeId Your store identifier
        */
    public importationGetReportings (storeId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.ImportationReporting>> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationGetReportings.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Ignore Column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        */
    public importationIgnoreColumn (storeId: string, executionId: string, columnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/ignore'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationIgnoreColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationIgnoreColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationIgnoreColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Map catalog column to a BeezUP column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The catalog column identifier
        * @param request 
        */
    public importationMapCatalogColumn (storeId: string, executionId: string, columnId: string, request: models.MapBeezUPColumnRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/map'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationMapCatalogColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationMapCatalogColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationMapCatalogColumn.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling importationMapCatalogColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Map custom column to a BeezUP column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        * @param request 
        */
    public importationMapCustomColumn (storeId: string, executionId: string, columnId: string, request: models.MapBeezUPColumnRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/map'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationMapCustomColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationMapCustomColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationMapCustomColumn.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling importationMapCustomColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Reattend Column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        */
    public importationReattendColumn (storeId: string, executionId: string, columnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/reattend'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationReattendColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationReattendColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationReattendColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Create or replace a custom column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        * @param request 
        */
    public importationSaveCustomColumn (storeId: string, executionId: string, columnId: string, request: models.ChangeCustomColumnRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationSaveCustomColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationSaveCustomColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationSaveCustomColumn.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling importationSaveCustomColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Start Manual Import
        * 
        * @param storeId Your store identifier
        * @param request 
        */
    public importationStartManualUpdate (storeId: string, request: models.StartManualImportRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.BeezUPCommonLink2>> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationStartManualUpdate.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling importationStartManualUpdate.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get technical progression
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        */
    public importationTechnicalProgression (storeId: string, executionId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ImportationTechnicalProgression> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/technicalProgression'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationTechnicalProgression.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationTechnicalProgression.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Unmap catalog column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The catalog column identifier
        */
    public importationUnmapCatalogColumn (storeId: string, executionId: string, columnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/unmap'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationUnmapCatalogColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationUnmapCatalogColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationUnmapCatalogColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Unmap custom column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        */
    public importationUnmapCustomColumn (storeId: string, executionId: string, columnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/unmap'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationUnmapCustomColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationUnmapCustomColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationUnmapCustomColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
