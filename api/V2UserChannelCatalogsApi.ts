/**
 * BeezUP API
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class V2UserChannelCatalogsApi {
    protected basePath = 'https://api.beezup.comv2';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
        * Disable a channel catalog
        * 
        * @param channelCatalogId The channel catalog identifier
        * @param request 
        */
    public configureChannelCatalogCostSettings (channelCatalogId: string, request: models.CostSettings, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/channelCatalogs/{channelCatalogId}/settings/cost'
            .replace('{' + 'channelCatalogId' + '}', String(channelCatalogId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'channelCatalogId' is not null or undefined
        if (channelCatalogId === null || channelCatalogId === undefined) {
            throw new Error('Required parameter channelCatalogId was null or undefined when calling configureChannelCatalogCostSettings.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling configureChannelCatalogCostSettings.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Configure channel catalog exclusion filters
        * 
        * @param channelCatalogId The channel catalog identifier
        * @param request 
        */
    public configureChannelCatalogExclusionFilters (channelCatalogId: string, request: models.ExclusionFilters, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/channelCatalogs/{channelCatalogId}/exclusionFilters'
            .replace('{' + 'channelCatalogId' + '}', String(channelCatalogId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'channelCatalogId' is not null or undefined
        if (channelCatalogId === null || channelCatalogId === undefined) {
            throw new Error('Required parameter channelCatalogId was null or undefined when calling configureChannelCatalogExclusionFilters.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling configureChannelCatalogExclusionFilters.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Disable a channel catalog
        * 
        * @param channelCatalogId The channel catalog identifier
        * @param request 
        */
    public configureChannelCatalogGeneralSettings (channelCatalogId: string, request: models.GeneralSettings, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/channelCatalogs/{channelCatalogId}/settings/general'
            .replace('{' + 'channelCatalogId' + '}', String(channelCatalogId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'channelCatalogId' is not null or undefined
        if (channelCatalogId === null || channelCatalogId === undefined) {
            throw new Error('Required parameter channelCatalogId was null or undefined when calling configureChannelCatalogGeneralSettings.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling configureChannelCatalogGeneralSettings.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Create a new channel catalog
        * 
        * @param request 
        */
    public createChannelCatalog (request: models.CreateChannelCatalogRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.BeezUPCommonLink2>> {
        const localVarPath = this.basePath + '/v2/user/channelCatalogs/';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling createChannelCatalog.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Delete the channel catalog
        * 
        */
    public deleteChannelCatalog (extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/channelCatalogs/{channelCatalogId}';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Delete a specific channel catalog product value override
        * 
        * @param channelCatalogId The channel catalog identifier
        * @param productId The product identifier
        * @param channelColumnId The channel column identifier
        */
    public deleteChannelCatalogProductValueOverride (channelCatalogId: string, productId: string, channelColumnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/overrides/{channelColumnId}'
            .replace('{' + 'channelCatalogId' + '}', String(channelCatalogId))
            .replace('{' + 'productId' + '}', String(productId))
            .replace('{' + 'channelColumnId' + '}', String(channelColumnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'channelCatalogId' is not null or undefined
        if (channelCatalogId === null || channelCatalogId === undefined) {
            throw new Error('Required parameter channelCatalogId was null or undefined when calling deleteChannelCatalogProductValueOverride.');
        }
        // verify required parameter 'productId' is not null or undefined
        if (productId === null || productId === undefined) {
            throw new Error('Required parameter productId was null or undefined when calling deleteChannelCatalogProductValueOverride.');
        }
        // verify required parameter 'channelColumnId' is not null or undefined
        if (channelColumnId === null || channelColumnId === undefined) {
            throw new Error('Required parameter channelColumnId was null or undefined when calling deleteChannelCatalogProductValueOverride.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Disable a channel catalog
        * 
        * @param channelCatalogId The channel catalog identifier
        */
    public disableChannelCatalog (channelCatalogId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/channelCatalogs/{channelCatalogId}/disable'
            .replace('{' + 'channelCatalogId' + '}', String(channelCatalogId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'channelCatalogId' is not null or undefined
        if (channelCatalogId === null || channelCatalogId === undefined) {
            throw new Error('Required parameter channelCatalogId was null or undefined when calling disableChannelCatalog.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Disable channel catalog product
        * By default a all your catalog products are exposed to the channel. You can disable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
        * @param channelCatalogId The channel catalog identifier
        * @param productId The product identifier
        */
    public disableChannelCatalogProduct (channelCatalogId: string, productId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/disable'
            .replace('{' + 'channelCatalogId' + '}', String(channelCatalogId))
            .replace('{' + 'productId' + '}', String(productId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'channelCatalogId' is not null or undefined
        if (channelCatalogId === null || channelCatalogId === undefined) {
            throw new Error('Required parameter channelCatalogId was null or undefined when calling disableChannelCatalogProduct.');
        }
        // verify required parameter 'productId' is not null or undefined
        if (productId === null || productId === undefined) {
            throw new Error('Required parameter productId was null or undefined when calling disableChannelCatalogProduct.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Enable a channel catalog
        * 
        * @param channelCatalogId The channel catalog identifier
        */
    public enableChannelCatalog (channelCatalogId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/channelCatalogs/{channelCatalogId}/enable'
            .replace('{' + 'channelCatalogId' + '}', String(channelCatalogId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'channelCatalogId' is not null or undefined
        if (channelCatalogId === null || channelCatalogId === undefined) {
            throw new Error('Required parameter channelCatalogId was null or undefined when calling enableChannelCatalog.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the channel catalog information
        * 
        * @param channelCatalogId The channel catalog identifier
        */
    public getChannelCatalog (channelCatalogId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ChannelCatalog> {
        const localVarPath = this.basePath + '/v2/user/channelCatalogs/{channelCatalogId}'
            .replace('{' + 'channelCatalogId' + '}', String(channelCatalogId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'channelCatalogId' is not null or undefined
        if (channelCatalogId === null || channelCatalogId === undefined) {
            throw new Error('Required parameter channelCatalogId was null or undefined when calling getChannelCatalog.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get channel catalog categories
        * 
        * @param channelCatalogId The channel catalog identifier
        */
    public getChannelCatalogCategories (channelCatalogId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ChannelCatalogCategoryMappings> {
        const localVarPath = this.basePath + '/v2/user/channelCatalogs/{channelCatalogId}/categoryMappings'
            .replace('{' + 'channelCatalogId' + '}', String(channelCatalogId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'channelCatalogId' is not null or undefined
        if (channelCatalogId === null || channelCatalogId === undefined) {
            throw new Error('Required parameter channelCatalogId was null or undefined when calling getChannelCatalogCategories.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get channel catalog exclusion filter operators
        * 
        */
    public getChannelCatalogExclusionFilterOperators (extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.ExclusionFilterOperator>> {
        const localVarPath = this.basePath + '/v2/user/channelCatalogs/exclusionFilterOperators';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get channel catalog product information
        * 
        * @param channelCatalogId The channel catalog identifier
        * @param productId The product identifier
        */
    public getChannelCatalogProductInfo (channelCatalogId: string, productId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ChannelCatalogProductInfo> {
        const localVarPath = this.basePath + '/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}'
            .replace('{' + 'channelCatalogId' + '}', String(channelCatalogId))
            .replace('{' + 'productId' + '}', String(productId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'channelCatalogId' is not null or undefined
        if (channelCatalogId === null || channelCatalogId === undefined) {
            throw new Error('Required parameter channelCatalogId was null or undefined when calling getChannelCatalogProductInfo.');
        }
        // verify required parameter 'productId' is not null or undefined
        if (productId === null || productId === undefined) {
            throw new Error('Required parameter productId was null or undefined when calling getChannelCatalogProductInfo.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get channel catalog product information list
        * 
        * @param channelCatalogId The channel catalog identifier
        * @param request The channel catalog product list filter
        */
    public getChannelCatalogProductInfoList (channelCatalogId: string, request?: models.GetChannelCatalogProductInfoListRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ChannelCatalogProductInfoList> {
        const localVarPath = this.basePath + '/v2/user/channelCatalogs/{channelCatalogId}/products'
            .replace('{' + 'channelCatalogId' + '}', String(channelCatalogId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'channelCatalogId' is not null or undefined
        if (channelCatalogId === null || channelCatalogId === undefined) {
            throw new Error('Required parameter channelCatalogId was null or undefined when calling getChannelCatalogProductInfoList.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * List all your current channel catalogs
        * 
        * @param storeId The store identifier
        */
    public getChannelCatalogs (storeId?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ChannelCatalogList> {
        const localVarPath = this.basePath + '/v2/user/channelCatalogs/';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (storeId !== undefined) {
            queryParameters['storeId'] = storeId;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Map channel catalog category
        * 
        * @param channelCatalogId The channel catalog identifier
        * @param request 
        */
    public mapChannelCatalogCategory (channelCatalogId: string, request: models.MapCategoryRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/channelCatalogs/{channelCatalogId}/categoryMappings/map'
            .replace('{' + 'channelCatalogId' + '}', String(channelCatalogId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'channelCatalogId' is not null or undefined
        if (channelCatalogId === null || channelCatalogId === undefined) {
            throw new Error('Required parameter channelCatalogId was null or undefined when calling mapChannelCatalogCategory.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling mapChannelCatalogCategory.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Configure channel catalog column mappings
        * 
        * @param channelCatalogId The channel catalog identifier
        * @param request 
        */
    public mapChannelCatalogColumns (channelCatalogId: string, request: models.ColumnMappingList, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/channelCatalogs/{channelCatalogId}/columnMappings'
            .replace('{' + 'channelCatalogId' + '}', String(channelCatalogId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'channelCatalogId' is not null or undefined
        if (channelCatalogId === null || channelCatalogId === undefined) {
            throw new Error('Required parameter channelCatalogId was null or undefined when calling mapChannelCatalogColumns.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling mapChannelCatalogColumns.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Override channel catalog product values
        * 
        * @param channelCatalogId The channel catalog identifier
        * @param productId The product identifier
        * @param request 
        */
    public overrideChannelCatalogProductOverrides (channelCatalogId: string, productId: string, request: models.ProductOverrides, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/overrides'
            .replace('{' + 'channelCatalogId' + '}', String(channelCatalogId))
            .replace('{' + 'productId' + '}', String(productId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'channelCatalogId' is not null or undefined
        if (channelCatalogId === null || channelCatalogId === undefined) {
            throw new Error('Required parameter channelCatalogId was null or undefined when calling overrideChannelCatalogProductOverrides.');
        }
        // verify required parameter 'productId' is not null or undefined
        if (productId === null || productId === undefined) {
            throw new Error('Required parameter productId was null or undefined when calling overrideChannelCatalogProductOverrides.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling overrideChannelCatalogProductOverrides.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Reenable channel catalog product
        * By default a all your catalog products are exposed to the channel. You can reenable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
        * @param channelCatalogId The channel catalog identifier
        * @param productId The product identifier
        */
    public reenableChannelCatalogProduct (channelCatalogId: string, productId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/reenable'
            .replace('{' + 'channelCatalogId' + '}', String(channelCatalogId))
            .replace('{' + 'productId' + '}', String(productId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'channelCatalogId' is not null or undefined
        if (channelCatalogId === null || channelCatalogId === undefined) {
            throw new Error('Required parameter channelCatalogId was null or undefined when calling reenableChannelCatalogProduct.');
        }
        // verify required parameter 'productId' is not null or undefined
        if (productId === null || productId === undefined) {
            throw new Error('Required parameter productId was null or undefined when calling reenableChannelCatalogProduct.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Unmap channel catalog category
        * 
        * @param channelCatalogId The channel catalog identifier
        * @param request 
        */
    public unmapChannelCatalogCategory (channelCatalogId: string, request: models.UnmapCategoryRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/channelCatalogs/{channelCatalogId}/categoryMappings/unmap'
            .replace('{' + 'channelCatalogId' + '}', String(channelCatalogId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'channelCatalogId' is not null or undefined
        if (channelCatalogId === null || channelCatalogId === undefined) {
            throw new Error('Required parameter channelCatalogId was null or undefined when calling unmapChannelCatalogCategory.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling unmapChannelCatalogCategory.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
