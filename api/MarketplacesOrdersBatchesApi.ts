/**
 * BeezUP API
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class MarketplacesOrdersBatchesApi {
    protected basePath = 'https://api.beezup.com/v2';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
        * Send a batch of operations to change your marketplace Order information (accept, ship, etc.)
        * The purpose of this operation is to reduce the amount of request to the API.
        * @param changeOrderType The Order change type
        * @param userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.
        * @param request 
        * @param testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account.
        */
    public changeOrderList (changeOrderType: string, userName: string, request: models.ChangeOrderListRequest, testMode?: boolean, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.BatchOrderOperationResponse> {
        const localVarPath = this.basePath + '/user/marketplaces/orders/batches/changeOrders/{changeOrderType}'
            .replace('{' + 'changeOrderType' + '}', String(changeOrderType));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'changeOrderType' is not null or undefined
        if (changeOrderType === null || changeOrderType === undefined) {
            throw new Error('Required parameter changeOrderType was null or undefined when calling changeOrderList.');
        }
        // verify required parameter 'userName' is not null or undefined
        if (userName === null || userName === undefined) {
            throw new Error('Required parameter userName was null or undefined when calling changeOrderList.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling changeOrderList.');
        }
        if (userName !== undefined) {
            queryParameters['userName'] = userName;
        }

        if (testMode !== undefined) {
            queryParameters['testMode'] = testMode;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Send a batch of operations to clear an Order&#39;s merchant information
        * The purpose of this operation is to reduce the amount of request to the API.
        * @param request 
        */
    public clearMerchantOrderInfoList (request: models.ClearMerchantOrderInfoListRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.BatchOrderOperationResponse> {
        const localVarPath = this.basePath + '/user/marketplaces/orders/batches/clearMerchantOrderInfos';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling clearMerchantOrderInfoList.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Send a batch of operations to set an Order&#39;s merchant information
        * The purpose of this operation is to reduce the amount of request to the API.
        * @param request 
        */
    public setMerchantOrderInfoList (request: models.SetMerchantOrderInfoListRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.BatchOrderOperationResponse> {
        const localVarPath = this.basePath + '/user/marketplaces/orders/batches/setMerchantOrderInfos';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling setMerchantOrderInfoList.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
