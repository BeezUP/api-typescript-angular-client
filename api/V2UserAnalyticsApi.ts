/**
 * BeezUP API
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class V2UserAnalyticsApi {
    protected basePath = 'https://api.beezup.comv2';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
        * Rule creation
        * 
        * @param storeId Your store identifier
        * @param request 
        */
    public createRule (storeId: string, request: models.CreateRuleRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/rules'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling createRule.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling createRule.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Delete the report filter
        * 
        * @param storeId Your store identifier
        * @param reportFilterId Your report filter identifier
        */
    public deleteReportFilter (storeId: string, reportFilterId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/reports/filters/{reportFilterId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'reportFilterId' + '}', String(reportFilterId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling deleteReportFilter.');
        }
        // verify required parameter 'reportFilterId' is not null or undefined
        if (reportFilterId === null || reportFilterId === undefined) {
            throw new Error('Required parameter reportFilterId was null or undefined when calling deleteReportFilter.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Delete Rule
        * 
        * @param storeId Your store identifier
        * @param ruleId Your rule identifier
        */
    public deleteRule (storeId: string, ruleId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/rules/{ruleId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'ruleId' + '}', String(ruleId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling deleteRule.');
        }
        // verify required parameter 'ruleId' is not null or undefined
        if (ruleId === null || ruleId === undefined) {
            throw new Error('Required parameter ruleId was null or undefined when calling deleteRule.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Disable rule
        * 
        * @param storeId Your store identifier
        * @param ruleId Your rule identifier
        */
    public disableRule (storeId: string, ruleId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/rules/{ruleId}/disable'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'ruleId' + '}', String(ruleId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling disableRule.');
        }
        // verify required parameter 'ruleId' is not null or undefined
        if (ruleId === null || ruleId === undefined) {
            throw new Error('Required parameter ruleId was null or undefined when calling disableRule.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Enable rule
        * 
        * @param storeId Your store identifier
        * @param ruleId Your rule identifier
        */
    public enableRule (storeId: string, ruleId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/rules/{ruleId}/enable'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'ruleId' + '}', String(ruleId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling enableRule.');
        }
        // verify required parameter 'ruleId' is not null or undefined
        if (ruleId === null || ruleId === undefined) {
            throw new Error('Required parameter ruleId was null or undefined when calling enableRule.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Export the report by category
        * Export the report by category
        * @param storeId Your store identifier
        * @param format 
        * @param request 
        */
    public exportStoreReportByCategory (storeId: string, format: string, request: models.ReportByCategoryRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.BeezUPCommonLink2>> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/reports/bycategory/export'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling exportStoreReportByCategory.');
        }
        // verify required parameter 'format' is not null or undefined
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling exportStoreReportByCategory.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling exportStoreReportByCategory.');
        }
        if (format !== undefined) {
            queryParameters['format'] = format;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Export the report by channel
        * Export the report by channel
        * @param storeId Your store identifier
        * @param format 
        * @param request 
        */
    public exportStoreReportByChannel (storeId: string, format: string, request: models.ReportByChannelRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.BeezUPCommonLink2>> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/reports/bychannel/export'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling exportStoreReportByChannel.');
        }
        // verify required parameter 'format' is not null or undefined
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling exportStoreReportByChannel.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling exportStoreReportByChannel.');
        }
        if (format !== undefined) {
            queryParameters['format'] = format;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Export the report by product
        * Export the report by product
        * @param storeId Your store identifier
        * @param format 
        * @param request 
        */
    public exportStoreReportByProduct (storeId: string, format: string, request: models.ReportByProductRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.BeezUPCommonLink2>> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/reports/byproduct/export'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling exportStoreReportByProduct.');
        }
        // verify required parameter 'format' is not null or undefined
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling exportStoreReportByProduct.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling exportStoreReportByProduct.');
        }
        if (format !== undefined) {
            queryParameters['format'] = format;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the report filter description
        * 
        * @param storeId Your store identifier
        * @param reportFilterId Your report filter identifier
        */
    public getReportFilter (storeId: string, reportFilterId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ReportFilter> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/reports/filters/{reportFilterId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'reportFilterId' + '}', String(reportFilterId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getReportFilter.');
        }
        // verify required parameter 'reportFilterId' is not null or undefined
        if (reportFilterId === null || reportFilterId === undefined) {
            throw new Error('Required parameter reportFilterId was null or undefined when calling getReportFilter.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get report filter list for the given store
        * 
        * @param storeId Your store identifier
        */
    public getReportFilters (storeId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ReportFilters> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/reports/filters'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getReportFilters.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Gets the rule
        * 
        * @param storeId Your store identifier
        * @param ruleId Your rule identifier
        */
    public getRule (storeId: string, ruleId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Rule> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/rules/{ruleId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'ruleId' + '}', String(ruleId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getRule.');
        }
        // verify required parameter 'ruleId' is not null or undefined
        if (ruleId === null || ruleId === undefined) {
            throw new Error('Required parameter ruleId was null or undefined when calling getRule.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Gets the list of rules for a given store
        * 
        * @param storeId Your store identifier
        */
    public getRules (storeId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.Rules> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/rules'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getRules.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the rules execution history
        * 
        * @param storeId Your store identifier
        * @param pageNumber The page to retrieve
        * @param pageSize The count of rule history to retrieve
        */
    public getRulesExecutions (storeId: string, pageNumber: number, pageSize: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.RuleExecutionReportings> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/rules/executions'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getRulesExecutions.');
        }
        // verify required parameter 'pageNumber' is not null or undefined
        if (pageNumber === null || pageNumber === undefined) {
            throw new Error('Required parameter pageNumber was null or undefined when calling getRulesExecutions.');
        }
        // verify required parameter 'pageSize' is not null or undefined
        if (pageSize === null || pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling getRulesExecutions.');
        }
        if (pageNumber !== undefined) {
            queryParameters['pageNumber'] = pageNumber;
        }

        if (pageSize !== undefined) {
            queryParameters['pageSize'] = pageSize;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the report by category
        * Get the report by category
        * @param storeId Your store identifier
        * @param request 
        */
    public getStoreReportByCategory (storeId: string, request: models.ReportByCategoryRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ReportByCategoryResponse> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/reports/bycategory'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getStoreReportByCategory.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getStoreReportByCategory.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the report by channel
        * Get the report by channel
        * @param storeId Your store identifier
        * @param request 
        */
    public getStoreReportByChannel (storeId: string, request: models.ReportByChannelRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ReportByChannelResponse> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/reports/bychannel'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getStoreReportByChannel.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getStoreReportByChannel.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the report by day
        * Get the report by day
        * @param storeId Your store identifier
        * @param request 
        */
    public getStoreReportByDay (storeId: string, request: models.ReportByDayRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ReportByDayResponse> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/reports/byday'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getStoreReportByDay.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getStoreReportByDay.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the report by day
        * Get the report by day
        * @param storeId Your store identifier
        * @param format 
        * @param request 
        */
    public getStoreReportByDayExport (storeId: string, format: string, request: models.ReportByDayRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<models.BeezUPCommonLink2>> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/reports/byday/export'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getStoreReportByDayExport.');
        }
        // verify required parameter 'format' is not null or undefined
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling getStoreReportByDayExport.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getStoreReportByDayExport.');
        }
        if (format !== undefined) {
            queryParameters['format'] = format;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the report by product
        * Get the report by product
        * @param storeId Your store identifier
        * @param request 
        */
    public getStoreReportByProduct (storeId: string, request: models.ReportByProductRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ReportByProductResponse> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/reports/byproduct'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getStoreReportByProduct.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getStoreReportByProduct.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the latest clicks tracked
        * 
        * @param storeId Your store identifier
        * @param count The click&#39;s count you want to get
        */
    public getStoreTrackedClicks (storeId: string, count?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.TrackedClicks> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/tracking/clicks'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getStoreTrackedClicks.');
        }
        if (count !== undefined) {
            queryParameters['count'] = count;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the latest external orders tracked
        * 
        * @param storeId Your store identifier
        * @param count The external order&#39;s count you want to get
        */
    public getStoreTrackedExternalOrders (storeId: string, count?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.TrackedExternalOrders> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/tracking/externalorders'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getStoreTrackedExternalOrders.');
        }
        if (count !== undefined) {
            queryParameters['count'] = count;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the latest orders tracked
        * 
        * @param storeId Your store identifier
        * @param count The order&#39;s count you want to get
        */
    public getStoreTrackedOrders (storeId: string, count?: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.TrackedOrders> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/tracking/orders'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getStoreTrackedOrders.');
        }
        if (count !== undefined) {
            queryParameters['count'] = count;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get store tracking synchronization status
        * Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are for this store. 
        * @param storeId Your store identifier
        */
    public getStoreTrackingStatus (storeId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.StoreTrackingStatus> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/tracking/status'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getStoreTrackingStatus.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Display the synchronization status of the clicks and orders
        * Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are. 
        */
    public getTrackingStatus (extraHttpRequestParams?: any ) : ng.IHttpPromise<models.TrackingStatus> {
        const localVarPath = this.basePath + '/v2/user/analytics/tracking/status';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Move the rule down
        * 
        * @param storeId Your store identifier
        * @param ruleId Your rule identifier
        */
    public moveDownRule (storeId: string, ruleId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/rules/{ruleId}/movedown'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'ruleId' + '}', String(ruleId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling moveDownRule.');
        }
        // verify required parameter 'ruleId' is not null or undefined
        if (ruleId === null || ruleId === undefined) {
            throw new Error('Required parameter ruleId was null or undefined when calling moveDownRule.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Move the rule up
        * 
        * @param storeId Your store identifier
        * @param ruleId Your rule identifier
        */
    public moveUpRule (storeId: string, ruleId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/rules/{ruleId}/moveup'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'ruleId' + '}', String(ruleId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling moveUpRule.');
        }
        // verify required parameter 'ruleId' is not null or undefined
        if (ruleId === null || ruleId === undefined) {
            throw new Error('Required parameter ruleId was null or undefined when calling moveUpRule.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Optimise products
        * /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
        * @param storeId Your store identifier
        * @param actionName 
        * @param request 
        */
    public optimise (storeId: string, actionName: string, request: models.OptimiseRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/optimisations/{actionName}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'actionName' + '}', String(actionName));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling optimise.');
        }
        // verify required parameter 'actionName' is not null or undefined
        if (actionName === null || actionName === undefined) {
            throw new Error('Required parameter actionName was null or undefined when calling optimise.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling optimise.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Optimise products&#39;s category
        * /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body.  
        * @param storeId Your store identifier
        * @param catalogCategoryId The category identifier concerned by this optimisation
        * @param actionName 
        * @param request The channel identifier list concerned by this optimisation
        */
    public optimiseByCategory (storeId: string, catalogCategoryId: string, actionName: string, request?: Array<string>, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/optimisations/bycategory/{catalogCategoryId}/{actionName}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'catalogCategoryId' + '}', String(catalogCategoryId))
            .replace('{' + 'actionName' + '}', String(actionName));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling optimiseByCategory.');
        }
        // verify required parameter 'catalogCategoryId' is not null or undefined
        if (catalogCategoryId === null || catalogCategoryId === undefined) {
            throw new Error('Required parameter catalogCategoryId was null or undefined when calling optimiseByCategory.');
        }
        // verify required parameter 'actionName' is not null or undefined
        if (actionName === null || actionName === undefined) {
            throw new Error('Required parameter actionName was null or undefined when calling optimiseByCategory.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Optimise products&#39;s category
        * /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
        * @param storeId Your store identifier
        * @param channelId The channel identifier concerned by this optimisation
        * @param actionName 
        */
    public optimiseByChannel (storeId: string, channelId: string, actionName: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/optimisations/bychannel/{channelId}/{actionName}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'channelId' + '}', String(channelId))
            .replace('{' + 'actionName' + '}', String(actionName));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling optimiseByChannel.');
        }
        // verify required parameter 'channelId' is not null or undefined
        if (channelId === null || channelId === undefined) {
            throw new Error('Required parameter channelId was null or undefined when calling optimiseByChannel.');
        }
        // verify required parameter 'actionName' is not null or undefined
        if (actionName === null || actionName === undefined) {
            throw new Error('Required parameter actionName was null or undefined when calling optimiseByChannel.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Optimise products
        * /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
        * @param storeId Your store identifier
        * @param productId The product identifier concerned by this optimisation
        * @param actionName 
        * @param request The channel identifier list concerned by this optimisation
        */
    public optimiseByProduct (storeId: string, productId: string, actionName: string, request?: Array<string>, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/optimisations/byproduct/{productId}/{actionName}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'productId' + '}', String(productId))
            .replace('{' + 'actionName' + '}', String(actionName));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling optimiseByProduct.');
        }
        // verify required parameter 'productId' is not null or undefined
        if (productId === null || productId === undefined) {
            throw new Error('Required parameter productId was null or undefined when calling optimiseByProduct.');
        }
        // verify required parameter 'actionName' is not null or undefined
        if (actionName === null || actionName === undefined) {
            throw new Error('Required parameter actionName was null or undefined when calling optimiseByProduct.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Run rule
        * 
        * @param storeId Your store identifier
        * @param ruleId Your rule identifier
        */
    public runRule (storeId: string, ruleId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/rules/{ruleId}/run'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'ruleId' + '}', String(ruleId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling runRule.');
        }
        // verify required parameter 'ruleId' is not null or undefined
        if (ruleId === null || ruleId === undefined) {
            throw new Error('Required parameter ruleId was null or undefined when calling runRule.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Run all rules for this store
        * 
        * @param storeId Your store identifier
        */
    public runRules (storeId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/rules/run'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling runRules.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Save the report filter
        * 
        * @param storeId Your store identifier
        * @param reportFilterId Your report filter identifier
        * @param reportFilter 
        */
    public saveReportFilter (storeId: string, reportFilterId: string, reportFilter: models.SaveReportFilterRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/reports/filters/{reportFilterId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'reportFilterId' + '}', String(reportFilterId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling saveReportFilter.');
        }
        // verify required parameter 'reportFilterId' is not null or undefined
        if (reportFilterId === null || reportFilterId === undefined) {
            throw new Error('Required parameter reportFilterId was null or undefined when calling saveReportFilter.');
        }
        // verify required parameter 'reportFilter' is not null or undefined
        if (reportFilter === null || reportFilter === undefined) {
            throw new Error('Required parameter reportFilter was null or undefined when calling saveReportFilter.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: reportFilter,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Update Rule
        * 
        * @param storeId Your store identifier
        * @param ruleId Your rule identifier
        * @param request 
        */
    public updateRule (storeId: string, ruleId: string, request: models.UpdateRuleRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/analytics/{storeId}/rules/{ruleId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'ruleId' + '}', String(ruleId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling updateRule.');
        }
        // verify required parameter 'ruleId' is not null or undefined
        if (ruleId === null || ruleId === undefined) {
            throw new Error('Required parameter ruleId was null or undefined when calling updateRule.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateRule.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PATCH',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
