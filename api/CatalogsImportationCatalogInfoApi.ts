/**
 * BeezUP API
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/beezUP/API) 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class CatalogsImportationCatalogInfoApi {
    protected basePath = 'https://api.beezup.com/v2';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
        * Configure catalog column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        * @param request 
        */
    public importationConfigureCatalogColumn (storeId: string, executionId: string, columnId: string, request: models.ConfigureCatalogColumnCatalogRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationConfigureCatalogColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationConfigureCatalogColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationConfigureCatalogColumn.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling importationConfigureCatalogColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Delete Custom Column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        */
    public importationDeleteCustomColumn (storeId: string, executionId: string, columnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationDeleteCustomColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationDeleteCustomColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationDeleteCustomColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the encrypted custom column expression in this importation
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        */
    public importationGetCustomColumnExpression (storeId: string, executionId: string, columnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<string> {
        const localVarPath = this.basePath + '/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/expression'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationGetCustomColumnExpression.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationGetCustomColumnExpression.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationGetCustomColumnExpression.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get custom columns currently place in this importation
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        */
    public importationGetCustomColumns (storeId: string, executionId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.CustomColumns> {
        const localVarPath = this.basePath + '/user/catalogs/{storeId}/importations/{executionId}/customColumns'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationGetCustomColumns.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationGetCustomColumns.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get detected catalog columns during this importation.
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        */
    public importationGetDetectedCatalogColumns (storeId: string, executionId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.DetectedCatalogColumns> {
        const localVarPath = this.basePath + '/user/catalogs/{storeId}/importations/{executionId}/catalogColumns'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationGetDetectedCatalogColumns.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationGetDetectedCatalogColumns.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the product sample related to this importation with all columns (catalog and custom)
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param productSampleIndex Index of the product sample. Starting from 0 to 99.
        */
    public importationGetProductSample (storeId: string, executionId: string, productSampleIndex: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ProductSample> {
        const localVarPath = this.basePath + '/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'productSampleIndex' + '}', String(productSampleIndex));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationGetProductSample.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationGetProductSample.');
        }
        // verify required parameter 'productSampleIndex' is not null or undefined
        if (productSampleIndex === null || productSampleIndex === undefined) {
            throw new Error('Required parameter productSampleIndex was null or undefined when calling importationGetProductSample.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get product sample custom column value related to this importation.
        * /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param productSampleIndex Index of the product sample. Starting from 0 to 99.
        * @param columnId The custom column identifier
        */
    public importationGetProductSampleCustomColumnValue (storeId: string, executionId: string, productSampleIndex: number, columnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<string> {
        const localVarPath = this.basePath + '/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}/customColumns/{columnId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'productSampleIndex' + '}', String(productSampleIndex))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationGetProductSampleCustomColumnValue.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationGetProductSampleCustomColumnValue.');
        }
        // verify required parameter 'productSampleIndex' is not null or undefined
        if (productSampleIndex === null || productSampleIndex === undefined) {
            throw new Error('Required parameter productSampleIndex was null or undefined when calling importationGetProductSampleCustomColumnValue.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationGetProductSampleCustomColumnValue.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Ignore Column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        */
    public importationIgnoreColumn (storeId: string, executionId: string, columnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/ignore'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationIgnoreColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationIgnoreColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationIgnoreColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Map catalog column to a BeezUP column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The catalog column identifier
        * @param request 
        */
    public importationMapCatalogColumn (storeId: string, executionId: string, columnId: string, request: models.MapBeezUPColumnRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/map'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationMapCatalogColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationMapCatalogColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationMapCatalogColumn.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling importationMapCatalogColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Map custom column to a BeezUP column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        * @param request 
        */
    public importationMapCustomColumn (storeId: string, executionId: string, columnId: string, request: models.MapBeezUPColumnRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/map'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationMapCustomColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationMapCustomColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationMapCustomColumn.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling importationMapCustomColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Reattend Column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        */
    public importationReattendColumn (storeId: string, executionId: string, columnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/reattend'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationReattendColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationReattendColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationReattendColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Create or replace a custom column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        * @param request 
        */
    public importationSaveCustomColumn (storeId: string, executionId: string, columnId: string, request: models.ChangeCustomColumnRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationSaveCustomColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationSaveCustomColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationSaveCustomColumn.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling importationSaveCustomColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Unmap catalog column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The catalog column identifier
        */
    public importationUnmapCatalogColumn (storeId: string, executionId: string, columnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/unmap'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationUnmapCatalogColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationUnmapCatalogColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationUnmapCatalogColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Unmap custom column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        */
    public importationUnmapCustomColumn (storeId: string, executionId: string, columnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/unmap'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationUnmapCustomColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationUnmapCustomColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationUnmapCustomColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
