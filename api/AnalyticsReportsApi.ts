/**
 * Public - Security
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class AnalyticsReportsApi {
    protected basePath = 'https://api.beezup.com/v2';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
        * Delete the report filter
        * 
        * @param storeId Your store identifier
        * @param reportFilterId Your report filter identifier
        */
    public deleteReportFilter (storeId: string, reportFilterId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/filters/{reportFilterId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'reportFilterId' + '}', String(reportFilterId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling deleteReportFilter.');
        }
        // verify required parameter 'reportFilterId' is not null or undefined
        if (reportFilterId === null || reportFilterId === undefined) {
            throw new Error('Required parameter reportFilterId was null or undefined when calling deleteReportFilter.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Export the report by category
        * Export the report by category
        * @param storeId Your store identifier
        * @param format 
        * @param request 
        */
    public exportStoreReportByCategory (storeId: string, format: string, request: models.ReportByCategoryRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.BeezUPCommonLink3> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/bycategory/export'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling exportStoreReportByCategory.');
        }
        // verify required parameter 'format' is not null or undefined
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling exportStoreReportByCategory.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling exportStoreReportByCategory.');
        }
        if (format !== undefined) {
            queryParameters['format'] = format;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Export the report by channel
        * Export the report by channel
        * @param storeId Your store identifier
        * @param format 
        * @param request 
        */
    public exportStoreReportByChannel (storeId: string, format: string, request: models.ReportByChannelRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.BeezUPCommonLink3> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/bychannel/export'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling exportStoreReportByChannel.');
        }
        // verify required parameter 'format' is not null or undefined
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling exportStoreReportByChannel.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling exportStoreReportByChannel.');
        }
        if (format !== undefined) {
            queryParameters['format'] = format;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Export the report by product
        * Export the report by product
        * @param storeId Your store identifier
        * @param format 
        * @param request 
        */
    public exportStoreReportByProduct (storeId: string, format: string, request: models.ReportByProductRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.BeezUPCommonLink3> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/byproduct/export'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling exportStoreReportByProduct.');
        }
        // verify required parameter 'format' is not null or undefined
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling exportStoreReportByProduct.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling exportStoreReportByProduct.');
        }
        if (format !== undefined) {
            queryParameters['format'] = format;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the report filter description
        * 
        * @param storeId Your store identifier
        * @param reportFilterId Your report filter identifier
        */
    public getReportFilter (storeId: string, reportFilterId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ReportFilter> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/filters/{reportFilterId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'reportFilterId' + '}', String(reportFilterId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getReportFilter.');
        }
        // verify required parameter 'reportFilterId' is not null or undefined
        if (reportFilterId === null || reportFilterId === undefined) {
            throw new Error('Required parameter reportFilterId was null or undefined when calling getReportFilter.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get report filter list for the given store
        * 
        * @param storeId Your store identifier
        */
    public getReportFilters (storeId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ReportFilters> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/filters'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getReportFilters.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the report by category
        * Get the report by category
        * @param storeId Your store identifier
        * @param request 
        */
    public getStoreReportByCategory (storeId: string, request: models.ReportByCategoryRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ReportByCategoryResponse> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/bycategory'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getStoreReportByCategory.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getStoreReportByCategory.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the report by channel
        * Get the report by channel
        * @param storeId Your store identifier
        * @param request 
        */
    public getStoreReportByChannel (storeId: string, request: models.ReportByChannelRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ReportByChannelResponse> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/bychannel'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getStoreReportByChannel.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getStoreReportByChannel.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the report by day
        * Get the report by day
        * @param storeId Your store identifier
        * @param request 
        */
    public getStoreReportByDay (storeId: string, request: models.ReportByDayRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ReportByDayResponse> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/byday'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getStoreReportByDay.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getStoreReportByDay.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the report by day
        * Get the report by day
        * @param storeId Your store identifier
        * @param format 
        * @param request 
        */
    public getStoreReportByDayExport (storeId: string, format: string, request: models.ReportByDayRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.BeezUPCommonLink3> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/byday/export'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getStoreReportByDayExport.');
        }
        // verify required parameter 'format' is not null or undefined
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling getStoreReportByDayExport.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getStoreReportByDayExport.');
        }
        if (format !== undefined) {
            queryParameters['format'] = format;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the report by product
        * Get the report by product
        * @param storeId Your store identifier
        * @param request 
        */
    public getStoreReportByProduct (storeId: string, request: models.ReportByProductRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ReportByProductResponse> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/byproduct'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getStoreReportByProduct.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getStoreReportByProduct.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Save the report filter
        * 
        * @param storeId Your store identifier
        * @param reportFilterId Your report filter identifier
        * @param reportFilter 
        */
    public saveReportFilter (storeId: string, reportFilterId: string, reportFilter: models.SaveReportFilterRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/filters/{reportFilterId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'reportFilterId' + '}', String(reportFilterId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling saveReportFilter.');
        }
        // verify required parameter 'reportFilterId' is not null or undefined
        if (reportFilterId === null || reportFilterId === undefined) {
            throw new Error('Required parameter reportFilterId was null or undefined when calling saveReportFilter.');
        }
        // verify required parameter 'reportFilter' is not null or undefined
        if (reportFilter === null || reportFilter === undefined) {
            throw new Error('Required parameter reportFilter was null or undefined when calling saveReportFilter.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: reportFilter,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
