/**
 * BeezUP API
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/beezUP/API) 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class AnalyticsReportsApi {
    protected basePath = 'https://api.beezup.com/v2';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
        * Delete the report filter
        * 
        * @param storeId Your store identifier
        * @param reportFilterId Your report filter identifier
        */
    public deleteReportFilter (storeId: string, reportFilterId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/filters/{reportFilterId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'reportFilterId' + '}', String(reportFilterId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling deleteReportFilter.');
        }
        // verify required parameter 'reportFilterId' is not null or undefined
        if (reportFilterId === null || reportFilterId === undefined) {
            throw new Error('Required parameter reportFilterId was null or undefined when calling deleteReportFilter.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Export the report by category
        * Export the report by category
        * @param storeId Your store identifier
        * @param format 
        * @param request 
        */
    public exportStoreReportByCategory (storeId: string, format: string, request: models.ReportByCategoryRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.BeezUPCommonLink3> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/bycategory/export'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling exportStoreReportByCategory.');
        }
        // verify required parameter 'format' is not null or undefined
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling exportStoreReportByCategory.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling exportStoreReportByCategory.');
        }
        if (format !== undefined) {
            queryParameters['format'] = format;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Export the report by channel
        * Export the report by channel
        * @param storeId Your store identifier
        * @param format 
        * @param request 
        */
    public exportStoreReportByChannel (storeId: string, format: string, request: models.ReportByChannelRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.BeezUPCommonLink3> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/bychannel/export'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling exportStoreReportByChannel.');
        }
        // verify required parameter 'format' is not null or undefined
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling exportStoreReportByChannel.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling exportStoreReportByChannel.');
        }
        if (format !== undefined) {
            queryParameters['format'] = format;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Export the report by product
        * Export the report by product
        * @param storeId Your store identifier
        * @param format 
        * @param request 
        */
    public exportStoreReportByProduct (storeId: string, format: string, request: models.ReportByProductRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.BeezUPCommonLink3> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/byproduct/export'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling exportStoreReportByProduct.');
        }
        // verify required parameter 'format' is not null or undefined
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling exportStoreReportByProduct.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling exportStoreReportByProduct.');
        }
        if (format !== undefined) {
            queryParameters['format'] = format;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the report filter description
        * 
        * @param storeId Your store identifier
        * @param reportFilterId Your report filter identifier
        */
    public getReportFilter (storeId: string, reportFilterId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ReportFilter> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/filters/{reportFilterId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'reportFilterId' + '}', String(reportFilterId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getReportFilter.');
        }
        // verify required parameter 'reportFilterId' is not null or undefined
        if (reportFilterId === null || reportFilterId === undefined) {
            throw new Error('Required parameter reportFilterId was null or undefined when calling getReportFilter.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get report filter list for the given store
        * 
        * @param storeId Your store identifier
        */
    public getReportFilters (storeId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ReportFilters> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/filters'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getReportFilters.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the report by category
        * Get the report by category
        * @param storeId Your store identifier
        * @param request 
        */
    public getStoreReportByCategory (storeId: string, request: models.ReportByCategoryRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ReportByCategoryResponse> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/bycategory'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getStoreReportByCategory.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getStoreReportByCategory.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the report by channel
        * Get the report by channel
        * @param storeId Your store identifier
        * @param request 
        */
    public getStoreReportByChannel (storeId: string, request: models.ReportByChannelRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ReportByChannelResponse> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/bychannel'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getStoreReportByChannel.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getStoreReportByChannel.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the report by day
        * Get the report by day
        * @param storeId Your store identifier
        * @param request 
        */
    public getStoreReportByDay (storeId: string, request: models.ReportByDayRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ReportByDayResponse> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/byday'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getStoreReportByDay.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getStoreReportByDay.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the report by day
        * Get the report by day
        * @param storeId Your store identifier
        * @param format 
        * @param request 
        */
    public getStoreReportByDayExport (storeId: string, format: string, request: models.ReportByDayRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.BeezUPCommonLink3> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/byday/export'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getStoreReportByDayExport.');
        }
        // verify required parameter 'format' is not null or undefined
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling getStoreReportByDayExport.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getStoreReportByDayExport.');
        }
        if (format !== undefined) {
            queryParameters['format'] = format;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the report by product
        * Get the report by product
        * @param storeId Your store identifier
        * @param request 
        */
    public getStoreReportByProduct (storeId: string, request: models.ReportByProductRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ReportByProductResponse> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/byproduct'
            .replace('{' + 'storeId' + '}', String(storeId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling getStoreReportByProduct.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getStoreReportByProduct.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Save the report filter
        * 
        * @param storeId Your store identifier
        * @param reportFilterId Your report filter identifier
        * @param reportFilter 
        */
    public saveReportFilter (storeId: string, reportFilterId: string, reportFilter: models.SaveReportFilterRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/user/analytics/{storeId}/reports/filters/{reportFilterId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'reportFilterId' + '}', String(reportFilterId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling saveReportFilter.');
        }
        // verify required parameter 'reportFilterId' is not null or undefined
        if (reportFilterId === null || reportFilterId === undefined) {
            throw new Error('Required parameter reportFilterId was null or undefined when calling saveReportFilter.');
        }
        // verify required parameter 'reportFilter' is not null or undefined
        if (reportFilter === null || reportFilter === undefined) {
            throw new Error('Required parameter reportFilter was null or undefined when calling saveReportFilter.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: reportFilter,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
