/**
 * BeezUP API
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class ImportationCatalogInfoApi {
    protected basePath = 'https://api.beezup.comv2';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
        * Configure catalog column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        * @param request 
        */
    public importationConfigureCatalogColumn (storeId: string, executionId: string, columnId: string, request: models.ConfigureCatalogColumnCatalogRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationConfigureCatalogColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationConfigureCatalogColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationConfigureCatalogColumn.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling importationConfigureCatalogColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Delete Custom Column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        */
    public importationDeleteCustomColumn (storeId: string, executionId: string, columnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationDeleteCustomColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationDeleteCustomColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationDeleteCustomColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the encrypted custom column expression in this importation
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        */
    public importationGetCustomColumnExpression (storeId: string, executionId: string, columnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<string> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/expression'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationGetCustomColumnExpression.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationGetCustomColumnExpression.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationGetCustomColumnExpression.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get custom columns currently place in this importation
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        */
    public importationGetCustomColumns (storeId: string, executionId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.CustomColumns> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationGetCustomColumns.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationGetCustomColumns.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get detected catalog columns during this importation.
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        */
    public importationGetDetectedCatalogColumns (storeId: string, executionId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.DetectedCatalogColumns> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationGetDetectedCatalogColumns.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationGetDetectedCatalogColumns.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get the product sample related to this importation with all columns (catalog and custom)
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param productSampleIndex Index of the product sample. Starting from 0 to 99.
        */
    public importationGetProductSample (storeId: string, executionId: string, productSampleIndex: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ProductSample> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'productSampleIndex' + '}', String(productSampleIndex));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationGetProductSample.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationGetProductSample.');
        }
        // verify required parameter 'productSampleIndex' is not null or undefined
        if (productSampleIndex === null || productSampleIndex === undefined) {
            throw new Error('Required parameter productSampleIndex was null or undefined when calling importationGetProductSample.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get product sample custom column value related to this importation.
        * /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param productSampleIndex Index of the product sample. Starting from 0 to 99.
        * @param columnId The custom column identifier
        */
    public importationGetProductSampleCustomColumnValue (storeId: string, executionId: string, productSampleIndex: number, columnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<string> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}/customColumns/{columnId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'productSampleIndex' + '}', String(productSampleIndex))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationGetProductSampleCustomColumnValue.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationGetProductSampleCustomColumnValue.');
        }
        // verify required parameter 'productSampleIndex' is not null or undefined
        if (productSampleIndex === null || productSampleIndex === undefined) {
            throw new Error('Required parameter productSampleIndex was null or undefined when calling importationGetProductSampleCustomColumnValue.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationGetProductSampleCustomColumnValue.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Ignore Column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        */
    public importationIgnoreColumn (storeId: string, executionId: string, columnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/ignore'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationIgnoreColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationIgnoreColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationIgnoreColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Map catalog column to a BeezUP column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The catalog column identifier
        * @param request 
        */
    public importationMapCatalogColumn (storeId: string, executionId: string, columnId: string, request: models.MapBeezUPColumnRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/map'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationMapCatalogColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationMapCatalogColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationMapCatalogColumn.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling importationMapCatalogColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Map custom column to a BeezUP column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        * @param request 
        */
    public importationMapCustomColumn (storeId: string, executionId: string, columnId: string, request: models.MapBeezUPColumnRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/map'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationMapCustomColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationMapCustomColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationMapCustomColumn.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling importationMapCustomColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Reattend Column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        */
    public importationReattendColumn (storeId: string, executionId: string, columnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/reattend'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationReattendColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationReattendColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationReattendColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Create or replace a custom column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        * @param request 
        */
    public importationSaveCustomColumn (storeId: string, executionId: string, columnId: string, request: models.ChangeCustomColumnRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationSaveCustomColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationSaveCustomColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationSaveCustomColumn.');
        }
        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling importationSaveCustomColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: request,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Unmap catalog column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The catalog column identifier
        */
    public importationUnmapCatalogColumn (storeId: string, executionId: string, columnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/unmap'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationUnmapCatalogColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationUnmapCatalogColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationUnmapCatalogColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Unmap custom column
        * 
        * @param storeId Your store identifier
        * @param executionId The execution identifier of you catalog importation
        * @param columnId The custom column identifier
        */
    public importationUnmapCustomColumn (storeId: string, executionId: string, columnId: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/unmap'
            .replace('{' + 'storeId' + '}', String(storeId))
            .replace('{' + 'executionId' + '}', String(executionId))
            .replace('{' + 'columnId' + '}', String(columnId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'storeId' is not null or undefined
        if (storeId === null || storeId === undefined) {
            throw new Error('Required parameter storeId was null or undefined when calling importationUnmapCustomColumn.');
        }
        // verify required parameter 'executionId' is not null or undefined
        if (executionId === null || executionId === undefined) {
            throw new Error('Required parameter executionId was null or undefined when calling importationUnmapCustomColumn.');
        }
        // verify required parameter 'columnId' is not null or undefined
        if (columnId === null || columnId === undefined) {
            throw new Error('Required parameter columnId was null or undefined when calling importationUnmapCustomColumn.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
