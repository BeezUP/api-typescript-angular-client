/**
 * BeezUP API
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class UserListOfValuesLOVApi {
    protected basePath = 'https://api.beezup.com/v2';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
        * Get the list of values related to this list name
        * 
        * @param listName The list of value name your want to get
        * @param acceptLanguage Indicates that the client accepts the following languages.
        * @param ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
        */
    public getUserListOfValues (listName: string, acceptLanguage?: Array<string>, ifNoneMatch?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.UserListOfValuesResponse> {
        const localVarPath = this.basePath + '/user/lov/{listName}'
            .replace('{' + 'listName' + '}', String(listName));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'listName' is not null or undefined
        if (listName === null || listName === undefined) {
            throw new Error('Required parameter listName was null or undefined when calling getUserListOfValues.');
        }
        headerParams['Accept-Language'] = acceptLanguage;

        headerParams['If-None-Match'] = ifNoneMatch;

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * Get all list names
        * 
        */
    public getUserLovIndex (extraHttpRequestParams?: any ) : ng.IHttpPromise<models.UserLovIndex> {
        const localVarPath = this.basePath + '/user/lov/';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
